xmat <- cbind(c(5, 0, 2, 0),
c(1, 1, 0, 1),
c(100, 100, 50, 100),
c(20, 50, 100, 10),
c(10, 10, 200, 20),
c(50, 54, 58, 53),
c(1,1,1,3),
c(2, 4, 1, 1))
rownames(xmat) <- c("A", "C", "G", "T")
colnames(xmat) <- paste0("pos-", 1:dim(xmat)[2])
xmat_norm <- apply(xmat, 2, function(x) return(x/sum(x)))
xmat
out <- dash(xmat, optmethod = "mixEM", verbose=FALSE, bf=TRUE)
library(dashr)
out <- dash(xmat, optmethod = "mixEM", verbose=FALSE, bf=TRUE)
library(dashr)
library(dashr)
out <- dash(xmat, optmethod = "mixEM", verbose=FALSE, bf=TRUE)
grid.newpage()
library(Logolas)
library(grid)
library(gridBase)
grid.newpage()
layout.rows <- 1
layout.cols <- 2
top.vp <- viewport(layout=grid.layout(layout.rows, layout.cols,
widths=unit(rep(6,layout.cols), rep("null", 2)),
heights=unit(c(20,50), rep("lines", 2))))
plot_reg <- vpList()
l <- 1
for(i in 1:layout.rows){
for(j in 1:layout.cols){
plot_reg[[l]] <- viewport(layout.pos.col = j, layout.pos.row = i, name = paste0("plotlogo", l))
l <- l+1
}
}
plot_tree <- vpTree(top.vp, plot_reg)
color_profile = list("type" = "per_row",
"col" = RColorBrewer::brewer.pal(4,name ="Spectral"))
pushViewport(plot_tree)
seekViewport(paste0("plotlogo", 1))
logomaker(xmat_norm,color_profile = color_profile,
frame_width = 1,
pop_name = "pre dash PWM",
newpage = F)
seekViewport(paste0('plotlogo',2))
logomaker(out$posmean,color_profile = color_profile,
frame_width = 1,
pop_name = "post dash PWM",
newpage = F)
mu <- c(rep(10, 1000), rep(20, 1000), rep(30, 1000), rep(10, 1000))
x <- round(mu + rnorm(4000, 0, 1))
##########       dashu         #############################
out <- dashu(x)
mu <- c(rep(10, 1000), rep(20, 1000), rep(30, 1000), rep(10, 1000))
x <- round(mu + rnorm(4000, 0, 1))
##########       dashu         #############################
out <- dash_smooth(x)
x
out <- dashr::dash_smooth(x)
devtools::document()
out <- dashr::dash_smooth(x)
smash_out <- smashr::smash.poiss(x)
################  Visualization  ######################
plot(x, col = "gray80")
lines(mu, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 2)
lines(smash_out, col = "yellow")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.6,
col=c("blue","red", "yellow"))
smash_out
out$estimate
out$estimate - smash_out
mu <- c(rep(1, 100), rep(2, 100), rep(3, 100), rep(1, 100))
x <- (mu + rnorm(400, 0, 1))
y <- sapply(x, function(x) return(rpois(1,exp(x))))
##########       dashu         #############################
out <- dashr::dash_smooth(y)
##########    smash   ############################
smash_out <- smashr::smash.poiss(y)
################  Visualization  ######################
plot(y, col = "gray80")
lines(exp(mu), col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 2)
lines(smash_out, col = "yellow")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.6,
col=c("blue","red", "yellow"))
mu <- c(rep(1, 100), rep(2, 100), rep(3, 100), rep(1, 100))
x <- (mu + rnorm(400, 0, 0.01))
y <- sapply(x, function(x) return(rpois(1,exp(x))))
##########       dashu         #############################
out <- dashr::dash_smooth(y)
##########    smash   ############################
smash_out <- smashr::smash.poiss(y)
################  Visualization  ######################
plot(y, col = "gray80")
lines(exp(mu), col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 2)
lines(smash_out, col = "yellow")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.6,
col=c("blue","red", "yellow"))
mu <- c(rep(1, 100), rep(2, 100), rep(3, 100), rep(1, 100))
x <- (mu + rnorm(400, 0, 0.01))
y <- sapply(x, function(x) return(rpois(1,exp(x))))
##########       dashu         #############################
out <- dashr::dash_smooth(y)
##########    smash   ############################
smash_out <- smashr::smash.poiss(y)
################  Visualization  ######################
plot(y, col = "gray80")
lines(exp(mu), col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 2)
lines(smash_out, col = "yellow")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.6,
col=c("blue","red", "yellow"))
mu <- c(rep(1, 100), rep(2, 100), rep(3, 100), rep(1, 100))
x <- (mu + rnorm(400, 0, 0.01))
y <- sapply(x, function(x) return(rpois(1,exp(x))))
##########       dashu         #############################
out <- dashr::dash_smooth(y)
##########    smash   ############################
smash_out <- smashr::smash.poiss(y)
################  Visualization  ######################
plot(y, col = "gray80")
lines(exp(mu), col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 2)
lines(smash_out, col = "yellow")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.6,
col=c("blue","red", "yellow"))
mu <- c(rep(10, 100), rep(20, 100), rep(30, 100), rep(10, 100))
x <- (mu + rnorm(400, 0, 0.1))
y <- sapply(x, function(x) return(rpois(1,x)))
##########       dashu         #############################
out <- dashr::dash_smooth(y)
##########    smash   ############################
smash_out <- smashr::smash.poiss(y)
################  Visualization  ######################
plot(y, col = "gray80")
lines(exp(mu), col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 2)
lines(smash_out, col = "yellow")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.6,
col=c("blue","red", "yellow"))
mu <- c(rep(10, 100), rep(20, 100), rep(30, 100), rep(10, 100))
x <- (mu + rnorm(400, 0, 0.1))
y <- sapply(x, function(x) return(rpois(1,x)))
##########       dashu         #############################
system.time(out <- dashr::dash_smooth(y))
##########    smash   ############################
system.time(smash_out <- smashr::smash.poiss(y))
################  Visualization  ######################
plot(y, col = "gray80")
lines(mu, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 2)
lines(smash_out, col = "yellow")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.6,
col=c("blue","red", "yellow"))
mu <- c(rep(10, 100), rep(20, 100), rep(30, 100), rep(10, 100))
x <- (mu + rnorm(400, 0, 10))
x[x < 0] = 0
y <- sapply(x, function(x) return(rpois(1,x)))
##########       dashu         #############################
system.time(out <- dashr::dash_smooth(y))
##########    smash   ############################
system.time(smash_out <- smashr::smash.poiss(y))
################  Visualization  ######################
plot(y, col = "gray80")
lines(mu, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 2)
lines(smash_out, col = "yellow")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.6,
col=c("blue","red", "yellow"))
devtools::document()
library(dashr)
library(dashr)
mu <- c(rep(10, 100), rep(20, 100), rep(30, 100), rep(10, 100))
x <- sapply(mu, function(x) rpois(1,x))
out <- dashr::dash_smooth(x)
plot(x, col = "gray80")
lines(mu, col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-smooth"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red"))
mu <- c(rep(10, 100), rep(20, 100), rep(30, 100), rep(10, 100))
x <- sapply(mu, function(x) rpois(1,x))
out <- dashr::dash_smooth(x)
plot(x, col = "gray80")
lines(mu, col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-smooth"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.6,
col=c("black","red"))
install.packages("GSEABase")
setwd("~/Documents/singlecell-clustering/analysis")
seurat_zheng <- get(load("../output/seurat_zheng.rda"))
dat <- seurat_zheng@raw.data
K <- 6
K0 = ceiling(1.5*K)
m = 10*K
Mquantile <- 1
source('~/Documents/singlecell-clustering/code/score_functions.R')
out <- norm_score(K, K0, m, dat, scatterplot = TRUE)
install.packages("rARPACK")
library(rARPACK)
out <- norm_score(K, K0, m, dat, scatterplot = TRUE)
install.packages("nnls")
out <- norm_score(K, K0, m, dat, scatterplot = TRUE)
dim(dat)
seurat_zheng <- get(load("seurat_zheng.rda"))
dat <- seurat_zheng@raw.data
K <- 6
K0 = ceiling(1.5*K)
m = 10*K
Mquantile <- 1
out <- norm_score(K, K0, m, dat, scatterplot = TRUE)
mu <- c(rep(10, 100), rep(20, 100), rep(30, 100), rep(10, 100))
x <- (mu + rnorm(400, 0, 0.1))
y <- sapply(x, function(x) return(rpois(1,x)))
plot(mu)
plot(y)
