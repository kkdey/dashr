K
n=dim(tit)[2]
J=dim(tit)[1]-1
nt=tit[-1,]
ns=ptit[,((1:(2*n))%%2==1)]
nf=nt-ns
maxit=maxit
tol=tol
convcrit=10.0
iter=0
lik=NULL
likk=0
qq <- mixalpha
K=length(qq)
pip1=1/K*matrix(1,nrow=J,ncol=K)
qq=qq%o%rep(1,n)
rK=rep(1,K)
pmat_i=list(0)
K
dim(qq)
n
qq
qq[1:5,1:5]
J
for(j in 1:J){
nns=rK%o%ns[j,]
nnf=rK%o%nf[j,]
pmat_i[[j]]=lbeta(nns+qq,nnf+qq)-lbeta(qq,qq)
}
pmat_i
pmat_i[[1]]
pmat_i[[1]][1:5,1:5]
pi = pip1
pi
dim(pi)
K
r
rK
ns[j,]
rK %o% ns[j,]
dim(rK %o% ns[j,])
nns=rK%o%ns[j,]
nnf=rK%o%nf[j,]
pmat_i[[j]]=
nns=rK%o%ns[j,]
nnf=rK%o%nf[j,]
pmat_i[[j]]=lbeta(nns+qq,nnf+qq)-lbeta(qq,qq)
lbeta(nns+qq,nnf+qq)-lbeta(qq,qq)
dim(lbeta(nns+qq,nnf+qq)-lbeta(qq,qq))
dim(qq)
nns[1:5,1:5]
pi=pip1
lik.old=likk
for(j in 1:J){
pp=pi[j,]%o%rep(1,n)
pmat=log(pp)+pmat_i[[j]]
pm=apply(pmat,2,max)
pmat=pmat-rK%o%pm
pip1.norm=exp(pmat)/(rK%o%colSums(exp(pmat)))
pip1[j,]=rowMeans(pip1.norm)
likk[j]=sum(log(colSums(exp(pmat)))+pm)
}
pip1
K=length(qq)
pip1=1/K*matrix(1,nrow=J,ncol=K)
qq=qq%o%rep(1,n)
rK=rep(1,K)
pmat_i=list(0)
for(j in 1:J){
nns=rK%o%ns[j,]
nnf=rK%o%nf[j,]
pmat_i[[j]]=lbeta(nns+qq,nnf+qq)-lbeta(qq,qq)
}
mu <- c(rep(20,1000), rep(10,1000), rep(30, 1000), rep(20, 1000))
x <- mu + rnorm(4000, 0, 1)
plot(x)
reflect <- FALSE
if(reflect){
extended_len <- 2^{ceiling(log(length(x), base=2))}
x_ext <- c(x, tail(x, extended_len - length(x)))
}else{
extended_len <- 2^{ceiling(log(length(x), base=2))}
x_ext <- c(x, rep(tail(x, 1), extended_len - length(x)))
}
pointmass=FALSE
x_odd <- x_ext[c(TRUE,FALSE)]
x_even <- x_ext[c(FALSE, TRUE)]
flow.prophat <- x_odd/(x_odd+x_even)
gridmult=sqrt(2)
mixalpha <- autoselect.mixalpha(flow.prophat = flow.prophat,
z_level = (x_even+x_odd),
mult=gridmult)
mixalpha <- mixalpha[mixalpha>0]
if(pointmass){ mixalpha = c(10^10,mixalpha) }
q <- mixalpha;
source('~/Documents/dash/R/binshrink.R')
K=length(qq)
pip1=1/K*matrix(1,nrow=J,ncol=K)
qq=qq%o%rep(1,n)
rK=rep(1,K)
pmat_i=list(0)
for(j in 1:J){
nns=rK%o%ns[j,]
nnf=rK%o%nf[j,]
pmat_i[[j]]=lbeta(nns+qq,nnf+qq)-lbeta(qq,qq)
}
flow.prophat <- x_odd/(x_odd+x_even)
gridmult=sqrt(2)
mixalpha <- autoselect.mixalpha(flow.prophat = flow.prophat,
z_level = (x_even+x_odd),
mult=gridmult)
mixalpha <- mixalpha[mixalpha>0]
if(pointmass){ mixalpha = c(10^10,mixalpha) }
q <- mixalpha;
n=length(x_ext)
J=log2(n)
titable=cxxParentTItable(x_ext)
tit=titable$TItable
ptit=titable$parent
qq <- mixalpha
maxit=2000
tol=1e-5
n=dim(tit)[2]
J=dim(tit)[1]-1
nt=tit[-1,]
ns=ptit[,((1:(2*n))%%2==1)]
nf=nt-ns
maxit=maxit
tol=tol
convcrit=10.0
iter=0
lik=NULL
likk=0
K=length(qq)
pip1=1/K*matrix(1,nrow=J,ncol=K)
qq=qq%o%rep(1,n)
rK=rep(1,K)
pmat_i=list(0)
for(j in 1:J){
nns=rK%o%ns[j,]
nnf=rK%o%nf[j,]
pmat_i[[j]]=lbeta(nns+qq,nnf+qq)-lbeta(qq,qq)
}
pmat_i
J
pp=pi[j,]%o%rep(1,n)
pmat=log(pp)+pmat_i[[j]]
pm=apply(pmat,2,max)
pmat=pmat-rK%o%pm
pip1.norm=exp(pmat)/(rK%o%colSums(exp(pmat)))
pip1[j,]=rowMeans(pip1.norm)
likk[j]=sum(log(colSums(exp(pmat)))+pm)
pi=pip1
lik.old=likk
J
j <- 1
pp=pi[j,]%o%rep(1,n)
pmat=log(pp)+pmat_i[[j]]
pm=apply(pmat,2,max)
pmat=pmat-rK%o%pm
pip1.norm=exp(pmat)/(rK%o%colSums(exp(pmat)))
pip1[j,]=rowMeans(pip1.norm)
likk[j]=sum(log(colSums(exp(pmat)))+pm)
pip1
lik.old=likk
for(j in 1:J){
pp=pi[j,]%o%rep(1,n)
pmat=log(pp)+pmat_i[[j]]
pm=apply(pmat,2,max)
pmat=pmat-rK%o%pm
pip1.norm=exp(pmat)/(rK%o%colSums(exp(pmat)))
pip1[j,]=rowMeans(pip1.norm)
likk[j]=sum(log(colSums(exp(pmat)))+pm)
}
lik=cbind(lik,likk)
pip1=pmax(pip1,1e-8)
pip1
rK
qq
dim(qq)
length(nns)
dim(nns)
nns[1:4,1:7]
pip1
rowSums(pip1)
mu <- c(rep(1, 1000), rep(2, 1000), rep(3, 1000), rep(1, 1000))
x <- mu + rnorm(4000, 0, 1)
reflect <- FALSE
ll <- length(x)
if(reflect){
extended_len <- 2^{ceiling(log(length(x), base=2))}
x_ext <- c(x, tail(x, extended_len - length(x)))
}else{
extended_len <- 2^{ceiling(log(length(x), base=2))}
x_ext <- c(x, rep(tail(x, 1), extended_len - length(x)))
}
plot(x_ext)
plot(mu)
x_odd <- x_ext[c(TRUE,FALSE)]
x_even <- x_ext[c(FALSE, TRUE)]
######################### create TI tables for the observations  ########################
titable=cxxParentTItable(x_ext)
tit=titable$TItable
ptit=titable$parent
nt=tit[-1,]
ns=ptit[,((1:(2*n))%%2==1)]
nf=nt-ns
n=dim(tit)[2]
J=dim(tit)[1]-1
nt=tit[-1,]
ns=ptit[,((1:(2*n))%%2==1)]
nf=nt-ns
K = length(mixalpha)
source('~/Documents/dash/R/binshrink.R')
x_odd <- x_ext[c(TRUE,FALSE)]
x_even <- x_ext[c(FALSE, TRUE)]
######################### create TI tables for the observations  ########################
titable=cxxParentTItable(x_ext)
tit=titable$TItable
ptit=titable$parent
nt=tit[-1,]
ns=ptit[,((1:(2*n))%%2==1)]
nf=nt-ns
n=dim(tit)[2]
J=dim(tit)[1]-1
nt=tit[-1,]
ns=ptit[,((1:(2*n))%%2==1)]
nf=nt-ns
K = length(mixalpha)
x_odd <- x_ext[c(TRUE,FALSE)]
x_even <- x_ext[c(FALSE, TRUE)]
######################### create TI tables for the observations  ########################
titable=cxxParentTItable(x_ext)
tit=titable$TItable
ptit=titable$parent
n=dim(tit)[2]
J=dim(tit)[1]-1
nt=tit[-1,]
ns=ptit[,((1:(2*n))%%2==1)]
nf=nt-ns
nt
length(nt)
dim(nt)
dim(ns)
source('~/Documents/dash/R/dash.R')
out <- dash(rbind(ns[k,], nf[k, ])
)
k <- 1
out <- dash(rbind(ns[k,], nf[k, ]))
out <- dash(rbind(ns[k,], nf[k, ]), optmethod = "mixEM", verbose=TRUE)
mat <- rbind(c(5, 0, 2, 0),
c(1, 1, 0, 1),
c(100, 100, 50, 100),
c(20, 50, 100, 10),
c(10, 10, 200, 20),
c(50, 54, 58, 53),
c(1,1,1,3),
c(2, 4, 1, 1))
out <- dash(mat, optmethod = "mixEM", verbose=TRUE)
library(ashr)
mat <- rbind(c(5, 0, 2, 0),
c(1, 1, 0, 1),
c(100, 100, 50, 100),
c(20, 50, 100, 10),
c(10, 10, 200, 20),
c(50, 54, 58, 53),
c(1,1,1,3),
c(2, 4, 1, 1))
out <- dash(mat, optmethod = "mixEM", verbose=TRUE)
out
mat
out <- dash(cbind(ns[k,], nf[k, ]), optmethod = "mixEM", verbose=TRUE)
cbind(ns[k,], nf[k, ])
mu <- c(rep(10, 1000), rep(20, 1000), rep(30, 1000), rep(10, 1000))
x <- mu + rnorm(4000, 0, 1)
reflect <- FALSE
ll <- length(x)
if(reflect){
extended_len <- 2^{ceiling(log(length(x), base=2))}
x_ext <- c(x, tail(x, extended_len - length(x)))
}else{
extended_len <- 2^{ceiling(log(length(x), base=2))}
x_ext <- c(x, rep(tail(x, 1), extended_len - length(x)))
}
x_odd <- x_ext[c(TRUE,FALSE)]
x_even <- x_ext[c(FALSE, TRUE)]
######################### create TI tables for the observations  ########################
titable=cxxParentTItable(x_ext)
tit=titable$TItable
ptit=titable$parent
n=dim(tit)[2]
J=dim(tit)[1]-1
nt=tit[-1,]
ns=ptit[,((1:(2*n))%%2==1)]
nf=nt-ns
which(ns < 0)
which (nf < 0)
out <- dash(cbind(ns[k,], nf[k, ]), optmethod = "mixEM", verbose=TRUE)
out
out$fitted_pi
out$posterior_weights
out <- dash(rbind(ns[k,], nf[k, ]), optmethod = "mixEM", verbose=TRUE)
out$fitted_pi
rbind(ns[k,], nf[k, ])
head(rbind(ns[k,], nf[k, ]))
head(rbind(ns[k,], nf[k, ])[1:2,1:5])
out$posmean
length(out$posmean)
dim(out$posmean)
out$posmean[1:2,1:5]
concentration <- c(Inf, 100, 50, 20, 10, 5, 2, 1)
pi_weights <- matrix(0, dim(ns)[1], length(concentration))
for(k in 1:dim(ns)[1]){
out <- dash(rbind(ns[k,], nf[k, ]), optmethod = "mixEM", verbose=TRUE)
pi_weights[k,] <- out$fitted_pi
}
pi_weights
pp=binash(tit,ptit,q,mode)$p
mode = 2
pp=binash(tit,ptit,q,mode)$p
q
q <- concentration
q
q[q==Inf] <- 10^5
q
pp=binash(tit,ptit,q,mode)$p
pp
est=reverse.pp(tit,pi_weights,q,mode)
plot(est)
plot(est, type= "l", col= "blue")
lines(mu, col = "red")
est2=reverse.pp(tit,pp,q,mode)
lines(est2, col = "green")
est=reverse.pp(tit,pi_weights,concentration,mode)
lines(est, col = "blue")
est
concentration2 <- concentration
concentration2[concentration2 == Inf] <- 10^20
est=reverse.pp(tit,pi_weights,concentration2,mode)
plot(est, type = "l", col = "blue")
concentration
concentration2
concentration2 <- concentration
concentration2[concentration2 == Inf] <- 10^5
est=reverse.pp(tit,pi_weights,concentration2,mode)
est2=reverse.pp(tit,pp,q,mode)
plot(est, type = "l", col = "blue")
lines(est2, type = "l", col = "green")
concentration2 <- concentration
concentration2[concentration2 == Inf] <- 10^10
est=reverse.pp(tit,pi_weights,concentration2,mode)
est2=reverse.pp(tit,pp,q,mode)
plot(est, type = "l", col = "blue")
lines(est2, type = "l", col = "green")
lines(mu, col = "red")
x_ext[1]
x_ext[1001]
plot(est + 0.98, type = "l", col = "blue")
lines(mu, col = "red")
est
mean(x[1:1000])
est_mod <- est + mean(x_ext) - mean(est)
plot(est_mod, type = "l", col = "blue")
lines(x_ext, col = "red")
plot(est_mod, type = "l", col = "blue")
lines(mu, col = "red")
mu <- c(rep(10, 1000), rep(20, 1000), rep(30, 1000), rep(10, 1000))
x <- mu + rnorm(4000, 0, 1)
reflect <- FALSE
ll <- length(x)
if(reflect){
extended_len <- 2^{ceiling(log(length(x), base=2))}
x_ext <- c(x, tail(x, extended_len - length(x)))
}else{
extended_len <- 2^{ceiling(log(length(x), base=2))}
x_ext <- c(x, rep(tail(x, 1), extended_len - length(x)))
}
x_odd <- x_ext[c(TRUE,FALSE)]
x_even <- x_ext[c(FALSE, TRUE)]
######################### create TI tables for the observations  ########################
titable=cxxParentTItable(x_ext)
tit=titable$TItable
ptit=titable$parent
n=dim(tit)[2]
J=dim(tit)[1]-1
nt=tit[-1,]
ns=ptit[,((1:(2*n))%%2==1)]
nf=nt-ns
concentration <- c(Inf, 100, 50, 20, 10, 5, 2, 1)
pi_weights <- matrix(0, dim(ns)[1], length(concentration))
for(k in 1:dim(ns)[1]){
out <- dash(rbind(ns[k,], nf[k, ]), optmethod = "mixEM", verbose=TRUE)
pi_weights[k,] <- out$fitted_pi
}
concentration2 <- concentration
concentration2[concentration2 == Inf] <- 10^10
est=reverse.pp(tit,pi_weights,concentration2,mode)
est2=reverse.pp(tit,pp,q,mode)
est_mod <- est + mean(x_ext) - mean(est)
plot(est_mod, type = "l", col = "blue")
lines(mu, col = "red")
est3 <- smashr::smash.poiss(x_ext)
lines(est3, col = "green")
setwd("~/Documents/dash/vignettes/test")
x <- get(load("../test/reads_all_1_93297593_93307481.Robj"))
x
input <- get(load("../test/reads_all_1_93297593_93307481.Robj"))
input[[1]]
input[[1]][[1]]
input[[1]][[2]]
dim(input[[1]][[2]])
dim(input[[1]][[3]])
length(input[[1]])
x <- input[[1]][[2]][1,]
length(x)
plot(x)
reflect <- FALSE
ll <- length(x)
if(reflect){
extended_len <- 2^{ceiling(log(length(x), base=2))}
x_ext <- c(x, tail(x, extended_len - length(x)))
}else{
extended_len <- 2^{ceiling(log(length(x), base=2))}
x_ext <- c(x, rep(tail(x, 1), extended_len - length(x)))
}
x_odd <- x_ext[c(TRUE,FALSE)]
x_even <- x_ext[c(FALSE, TRUE)]
######################### create TI tables for the observations  ########################
titable=cxxParentTItable(x_ext)
tit=titable$TItable
ptit=titable$parent
n=dim(tit)[2]
J=dim(tit)[1]-1
nt=tit[-1,]
ns=ptit[,((1:(2*n))%%2==1)]
nf=nt-ns
concentration <- c(Inf, 100, 50, 20, 10, 5, 2, 1)
pi_weights <- matrix(0, dim(ns)[1], length(concentration))
for(k in 1:dim(ns)[1]){
out <- dash(rbind(ns[k,], nf[k, ]), optmethod = "mixEM", verbose=TRUE)
pi_weights[k,] <- out$fitted_pi
}
concentration2 <- concentration
concentration2[concentration2 == Inf] <- 10^10
est=reverse.pp(tit,pi_weights,concentration2,mode)
est2=reverse.pp(tit,pp,q,mode)
est_mod <- est + mean(x_ext) - mean(est)
plot(est_mod, type = "l", col = "blue")
lines(mu, col = "red")
lines(est3, col = "green")
est3 <- smashr::smash.poiss(x_ext)
plot(est3, type ="l", col = "green")
plot(est3, col = "green")
x <- input[[1]][[2]][1,]
reflect <- FALSE
ll <- length(x)
if(reflect){
extended_len <- 2^{ceiling(log(length(x), base=2))}
x_ext <- c(x, tail(x, extended_len - length(x)))
}else{
extended_len <- 2^{ceiling(log(length(x), base=2))}
x_ext <- c(x, rep(tail(x, 1), extended_len - length(x)))
}
x_odd <- x_ext[c(TRUE,FALSE)]
x_even <- x_ext[c(FALSE, TRUE)]
######################### create TI tables for the observations  ########################
titable=cxxParentTItable(x_ext)
tit=titable$TItable
ptit=titable$parent
n=dim(tit)[2]
J=dim(tit)[1]-1
nt=tit[-1,]
ns=ptit[,((1:(2*n))%%2==1)]
nf=nt-ns
nt
concentration <- c(Inf, 100, 50, 20, 10, 5, 2, 1)
k <- 1
rbind(ns[k,], nf[k, ])
rbind(ns[1,], nf[1, ])
rbind(ns[1,1:10], nf[1,1:10 ])
length(ns)
out <- dash(rbind(ns[k,], nf[k, ]), optmethod = "mixEM", verbose=TRUE)
which(ns < 0)
which(nf < 0)
mat <- rbind(ns[k,], nf[k, ])
min(mat)
mat <- mat + 1
out <- dash(mat, optmethod = "mixEM", verbose=TRUE)
out$fitted_pi
pi_weights <- matrix(0, dim(ns)[1], length(concentration))
for(k in 1:dim(ns)[1]){
mat <- rbind(ns[k,], nf[k, ])
mat <- mat + 1
out <- dash(mat, optmethod = "mixEM", verbose=TRUE)
pi_weights[k,] <- out$fitted_pi
}
concentration2 <- concentration
concentration2[concentration2 == Inf] <- 10^10
est=reverse.pp(tit,pi_weights,concentration2,mode)
est2=reverse.pp(tit,pp,q,mode)
est_mod <- est + mean(x_ext) - mean(est)
plot(est_mod, type = "l", col = "blue")
lines(mu, col = "red")
lines(est3, col = "green")
est3 <- smashr::smash.poiss(x_ext)
est=reverse.pp(tit,pi_weights,concentration2,mode)
est_mod <- est + mean(x_ext) - mean(est)
plot(est_mod, type = "l", col = "blue")
lines(x_ext, col = "red")
lines(est_mod, col = "blue")
est3 <- smashr::smash.poiss(x_ext)
lines(est3, col = "green")
