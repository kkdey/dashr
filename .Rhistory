plot(y, col = "gray80")
lines(exp(mu), col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
lines(out2$estimate, col = "yellow", lwd = 4)
lines(smash_out, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "dash-mr", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red", "yellow", "blue"))
plot(y, col = "gray80")
lines(exp(mu), col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
lines(out2$estimate, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red", "blue"))
tail(c(34,45,56,12,13),2)
devtools::document()
library(dashr)
dash_smooth
mu <- c(rep(1, 100), rep(2, 100), rep(3, 100), rep(1, 100))
x <- (mu + rnorm(400, 0, 0.01))
y <- sapply(x, function(x) return(rpois(1,exp(x))))
out <- dashr::dash_smooth(y, reflect = FALSE)
out2 <- dashr::dash_smooth(y, reflect = TRUE)
smash_out <- smashr::smash.poiss(y)
plot(y, col = "gray80")
lines(exp(mu), col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
lines(out2$estimate, col = "yellow", lwd = 4)
lines(smash_out, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "dash-mr", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red", "yellow", "blue"))
plot(y, col = "gray80")
lines(exp(mu), col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
lines(out2$estimate, col = "yellow", lwd = 4)
lines(smash_out, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "dash-mr", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red", "yellow", "blue"))
mu <- c(rep(1, 100), rep(2, 100), rep(3, 100), rep(1, 100))
x <- (mu + rnorm(400, 0, 0.01))
y <- sapply(x, function(x) return(rpois(1,exp(x))))
out <- dashr::dash_smooth(y, reflect = FALSE)
out2 <- dashr::dash_smooth(y, reflect = TRUE)
smash_out <- smashr::smash.poiss(y)
plot(y, col = "gray80")
lines(exp(mu), col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
lines(out2$estimate, col = "yellow", lwd = 4)
lines(smash_out, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "dash-mr", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red", "yellow", "blue"))
plot(y, col = "gray80")
lines(exp(mu), col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
lines(out2$estimate, col = "yellow", lwd = 4)
lines(smash_out, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "dash-mr", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red", "yellow", "blue"))
head(c(2,3,4), 0)
devtools::document()
library(dashr)
dash_smooth
mu <- c(rep(1, 100), rep(2, 100), rep(3, 100), rep(1, 100))
x <- (mu + rnorm(400, 0, 0.01))
y <- sapply(x, function(x) return(rpois(1,exp(x))))
out <- dashr::dash_smooth(y, reflect = FALSE)
out2 <- dashr::dash_smooth(y, reflect = TRUE)
smash_out <- smashr::smash.poiss(y)
plot(y, col = "gray80")
lines(exp(mu), col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
lines(out2$estimate, col = "yellow", lwd = 4)
lines(smash_out, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "dash-mr", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red", "yellow", "blue"))
plot(y, col = "gray80")
lines(exp(mu), col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
lines(out2$estimate, col = "yellow", lwd = 4)
lines(smash_out, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "dash-mr", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red", "yellow", "blue"))
length(out2$estimate)
length(out$estimate)
mu <- c(rep(1, 100), rep(2, 100), rep(3, 100), rep(1, 100))
x <- (mu + rnorm(400, 0, 0.01))
y <- sapply(x, function(x) return(rpois(1,exp(x))))
out <- dashr::dash_smooth(y, reflect = TRUE)
smash_out <- smashr::smash.poiss(y)
plot(y, col = "gray80")
lines(exp(mu), col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
lines(smash_out, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red", "blue"))
plot(y, col = "gray80")
lines(exp(mu), col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
lines(smash_out, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red", "blue"))
mu <- c(rep(1, 100), rep(2, 100), rep(3, 100), rep(1, 100))
x <- (mu + rnorm(400, 0, 0.01))
y <- sapply(x, function(x) return(rpois(1,exp(x))))
out <- dashr::dash_smooth(y, reflect = TRUE)
smash_out <- smashr::smash.poiss(y)
plot(y, col = "gray80")
lines(exp(mu), col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
lines(smash_out, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red", "blue"))
plot(y, col = "gray80")
lines(exp(mu), col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
lines(smash_out, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red", "blue"))
mu <- c(rep(1, 100), rep(2, 100), rep(3, 100), rep(1, 100))
x <- (mu + rnorm(400, 0, 0.01))
y <- sapply(x, function(x) return(rpois(1,exp(x))))
out <- dashr::dash_smooth(y, reflect = TRUE)
smash_out <- smashr::smash.poiss(y)
plot(y, col = "gray80")
lines(exp(mu), col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
lines(smash_out, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red", "blue"))
plot(y, col = "gray80")
lines(exp(mu), col = "black", lwd = 4)
lines(out$estimate, col = "red", lwd = 4)
lines(smash_out, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("black","red", "blue"))
devtools::document()
library(dashr)
?smash
?smashr::smash
smashr::smash
smashr::smash.poiss
setwd("~/Documents/methClust-pages/analysis")
library(ecostructure)
library(methClust)
library(Biobase)
library(rasterVis)
library(gtools)
library(bigalgebra)
library(sp)
library(rgdal)
library(ggplot2)
library(maps)
library(mapdata)
library(mapplots)
library(scales)
library(ggthemes)
latlong <- get(load("../data/LatLongCells_frame.rda"))
world_map <- map_data("world")
world_map <- world_map[world_map$region != "Antarctica",] # intercourse antarctica
world_map <- world_map[world_map$long > 90 & world_map$long < 160, ]
world_map <- world_map[world_map$lat > -18 & world_map$lat < 20, ]
p <- ggplot() + coord_fixed() +
xlab("") + ylab("")
#Add map to base plot
base_world_messy <- p + geom_polygon(data=world_map, aes(x=long, y=lat, group=group), colour="light green", fill="light green")
cleanup <-
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_rect(fill = 'white', colour = 'white'),
axis.line = element_line(colour = "white"), legend.position="none",
axis.ticks=element_blank(), axis.text.x=element_blank(),
axis.text.y=element_blank())
base_world <- base_world_messy + cleanup
base_world
latlong <- get(load("../data/LatLongCells_frame.rda"))
idx1 <- which(latlong[,2] > -18 & latlong[,2] < 20)
idx2 <- which(latlong[,1] > 90 & latlong[,1] < 160)
idx <- intersect(idx1, idx2)
length(idx)
latlong2 <- latlong[idx,]
birds_pa_data <- readRDS("../data/birds_presab_land_breeding_counts.rds")
birds_pa_data_2 <- birds_pa_data[idx, ]
birds_pa_data_3 <- birds_pa_data_2[, which(colSums(birds_pa_data_2)!=0)]
dim(birds_pa_data_3)
birds_pa_data_3[1:5,1:5]
dim(latlong2)
ll <- list("data" = birds_pa_data_3, "latlong" = latlong2)
save(ll, file = "../../lgamfac/data.rda")
devtools::install_github("omarwagih/ggseqlogo")
require(ggplot2)
require(ggseqlogo)
data(ggseqlogo_sample)
ggseqlogo_sample
ggseqlogo_sample
data(ggseqlogo_sample)
dat <- data(ggseqlogo_sample)
dat
ggseqlogo( seqs_dna$MA0001.1 )
seqs_dna$MA0001.1
ggseqlogo( seqs_aa$AKT1 )
seqs_aa$AKT1
setwd("~/Documents/dashr/vignettes/test")
chipexo1 <- read.table("chipexo_examples/example_CTCF_MACE_wgEncodeBroadHistoneHelas3CtcfStdAlnRep1_forward_counts.txt")
dim(chipexo1)
chipexo1
extract_counts <- function(filename){
bed_counts <- read.table(filename, header = F, stringsAsFactors = F)
colnames(bed_counts) <- c("chr", "start", "end", "name", "width", "counts")
counts <- strsplit(bed_counts$counts, split = ",")[[1]]
counts[counts == "NA"] <- 0
counts <- as.numeric(counts)
return(counts.l = list(chr = bed_counts$chr, start = bed_counts$start, end = bed_counts$end, counts = counts))
}
chipexo1 <- extract_counts("chipexo_examples/example_CTCF_MACE_wgEncodeBroadHistoneHelas3CtcfStdAlnRep1_forward_counts.txt")
chipexo1
plot(chipexo1$counts)
chipexo1 <- extract_counts("chipexo_examples/example_CTCF_MACE_wgEncodeBroadHistoneHelas3CtcfStdAlnRep1_forward_counts.txt")
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "", ylim = c(0,20))
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
out <- dashr::dash_smooth(chipexo1$counts)
library(SQUAREM)
out <- dashr::dash_smooth(chipexo1$counts)
plot(out$estimate)
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
lines(out$estimate)
out$estimate
exp(out$estimate)
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
lines(exp(out$estimate))
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
lines(out$estimate)
out2 <- smashr::smash.poiss(chipexo1$counts)
lines(out2)
dash
library(dashr)
dash_smooth()
dash_smooth
out <- dashr::dash_smooth(chipexo1$counts, dash_control = list(Inf_weight = 1))
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
lines(out$estimate, col = "red")
out2 <- smashr::smash.poiss(chipexo1$counts)
lines(out2, col = "green")
plot(y, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out$estimate, col = "red", lwd = 4)
lines(out2, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("gray80","red", "blue"))
plot(chipexo1$counts, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out$estimate, col = "red", lwd = 4)
lines(out2, col = "blue")
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 2.5,
col=c("gray80","red", "blue"))
plot(chipexo1$counts, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out$estimate, col = "red", lwd = 4)
lines(out2, col = "blue", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.5,
col=c("gray80","red", "blue"))
plot(chipexo1$counts, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out2, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.5,
col=c("gray80","red", "blue"))
chipexo1 <- extract_counts("chipexo_examples/example_CTCF_MACE_wgEncodeBroadHistoneHelas3CtcfStdAlnRep1_reverse_counts.txt")
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
out <- dashr::dash_smooth(chipexo1$counts, dash_control = list(Inf_weight = 1))
lines(out$estimate, col = "red")
out2 <- smashr::smash.poiss(chipexo1$counts)
lines(out2, col = "green")
plot(chipexo1$counts, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out2, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.5,
col=c("gray80","red", "blue"))
out <- dashr::dash_smooth(chipexo1$counts, dash_control = list(Inf_weight = 100))
lines(out$estimate, col = "red")
out2 <- smashr::smash.poiss(chipexo1$counts)
lines(out2, col = "green")
plot(chipexo1$counts, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out2, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.5,
col=c("gray80","red", "blue"))
chipexo1 <- extract_counts("chipexo_examples/example_CTCF_MACE_wgEncodeBroadHistoneHelas3CtcfStdAlnRep2_forward_counts.txt")
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
out <- dashr::dash_smooth(chipexo1$counts, dash_control = list(Inf_weight = 1))
lines(out$estimate, col = "red")
out2 <- smashr::smash.poiss(chipexo1$counts)
lines(out2, col = "green")
plot(chipexo1$counts, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out2, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.5,
col=c("gray80","red", "blue"))
chipexo1 <- extract_counts("chipexo_examples/example_CTCF_MACE_wgEncodeOpenChromChipHelas3CtcfAlnRep1_forward_counts.txt")
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
out <- dashr::dash_smooth(chipexo1$counts, dash_control = list(Inf_weight = 1))
lines(out$estimate, col = "red")
out2 <- smashr::smash.poiss(chipexo1$counts)
lines(out2, col = "green")
plot(chipexo1$counts, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out2, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.5,
col=c("gray80","red", "blue"))
chipexo1 <- extract_counts("chipexo_examples/example_CTCF_MACE_wgEncodeOpenChromChipHelas3CtcfAlnRep2_forward_counts.txt")
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
out <- dashr::dash_smooth(chipexo1$counts, dash_control = list(Inf_weight = 1))
lines(out$estimate, col = "red")
out2 <- smashr::smash.poiss(chipexo1$counts)
lines(out2, col = "green")
plot(chipexo1$counts, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out2, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.5,
col=c("gray80","red", "blue"))
chipexo1 <- extract_counts("chipseq_examples/example_CTCF_MACE_Forward_counts.txt")
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
out <- dashr::dash_smooth(chipexo1$counts, dash_control = list(Inf_weight = 1))
lines(out$estimate, col = "red")
out2 <- smashr::smash.poiss(chipexo1$counts)
lines(out2, col = "green")
plot(chipexo1$counts, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out2, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.5,
col=c("gray80","red", "blue"))
chipexo1 <- extract_counts("chipseq_examples/example_CTCF_raw_rep1_Forward_counts.txt")
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
out <- dashr::dash_smooth(chipexo1$counts, dash_control = list(Inf_weight = 1))
lines(out$estimate, col = "red")
out2 <- smashr::smash.poiss(chipexo1$counts)
lines(out2, col = "green")
plot(chipexo1$counts, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out2, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.5,
col=c("gray80","red", "blue"))
chipexo1 <- extract_counts("chipseq_examples/example_CTCF_raw_rep2_Forward_counts.txt")
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
out <- dashr::dash_smooth(chipexo1$counts, dash_control = list(Inf_weight = 1))
lines(out$estimate, col = "red")
out2 <- smashr::smash.poiss(chipexo1$counts)
lines(out2, col = "green")
plot(chipexo1$counts, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out2, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.5,
col=c("gray80","red", "blue"))
chipexo1 <- extract_counts("chipseq_examples/example_CTCF_raw_rep3_Forward_counts.txt")
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
out <- dashr::dash_smooth(chipexo1$counts, dash_control = list(Inf_weight = 1))
lines(out$estimate, col = "red")
out2 <- smashr::smash.poiss(chipexo1$counts)
lines(out2, col = "green")
plot(chipexo1$counts, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out2, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.5,
col=c("gray80","red", "blue"))
chipexo1 <- extract_counts("chipexo_examples/example_region1_wgEncodeSydhHistoneK562H3k27me3bUcdAlnRep1_counts.txt")
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
out <- dashr::dash_smooth(chipexo1$counts, dash_control = list(Inf_weight = 1))
lines(out$estimate, col = "red")
out2 <- smashr::smash.poiss(chipexo1$counts)
lines(out2, col = "green")
plot(chipexo1$counts, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out2, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.5,
col=c("gray80","red", "blue"))
chipexo1 <- extract_counts("chipexo_examples/example_region1_wgEncodeSydhHistoneK562H3k9acbUcdAlnRep1_counts.txt")
tab <-  read.table("chipexo_examples/example_region1_wgEncodeSydhHistoneK562H3k9acbUcdAlnRep1_counts.txt", header = F, stringsAsFactors = F)
tab
tab <-  read.table("chipexo_examples/example_CTCF_MACE_wgEncodeBroadHistoneHelas3CtcfStdAlnRep1_forward_counts.txt", header = F, stringsAsFactors = F)
tab
tab <-  read.table("chipexo_examples/example_region1_wgEncodeSydhHistoneK562H3k27me3bUcdAlnRep1_counts.txt", header = F, stringsAsFactors = F)
extract_counts_hg <- function(filename){
bed_counts <- read.table(filename, header = F, stringsAsFactors = F)
colnames(bed_counts) <- c("chr", "start", "end", "width", "counts")
counts <- strsplit(bed_counts$counts, split = ",")[[1]]
counts[counts == "NA"] <- 0
counts <- as.numeric(counts)
return(counts.l = list(chr = bed_counts$chr, start = bed_counts$start, end = bed_counts$end, counts = counts))
}
chipexo1 <- extract_counts_hg("chipexo_examples/example_region1_wgEncodeSydhHistoneK562H3k9acbUcdAlnRep1_counts.txt")
plot(chipexo1$counts, type = "h", col = "blue", ylab = "rep1 forward", xlab = "")
out <- dashr::dash_smooth(chipexo1$counts, dash_control = list(Inf_weight = 1))
lines(out$estimate, col = "red")
out2 <- smashr::smash.poiss(chipexo1$counts)
lines(out2, col = "green")
plot(chipexo1$counts, col = "gray80", type = "h", ylab = "rep1 forward", xlab = "", main = "CTCF-rep1-forward")
lines(out2, col = "blue", lwd = 2)
lines(out$estimate, col = "red", lwd = 4)
legend("topright", # places a legend at the appropriate place
c("truth","dash-m", "smash-poiss"), # puts text in the legend
lty=c(1,1), # gives the legend appropriate symbols (lines)
lwd=c(2.5,2.5),
cex = 0.5,
col=c("gray80","red", "blue"))
save(ll, file = "chipexo_wgEncodeSydhHistoneK562H3k9acbUcdAlnRep1.rda")
ll <- list("counts" = chipexo1$counts, "dash" = out$estimate, "smash" = out2)
save(ll, file = "chipexo_wgEncodeSydhHistoneK562H3k9acbUcdAlnRep1.rda")
